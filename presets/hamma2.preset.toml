# Preset for the inputs offered by a UAH/Bitzer HAMMA2 LF/VLF lightning sensor

config_version = 1
# Name of this device preset, used for lookup
name = "hamma2"
# Type of this preset
type = "device"

# Preset-level metadata
[metadata]
    name_full = "HAMMA2 Sensor"
    author = "C.A.M. Gerlach and the UAH HAMMA group"
    description = "Device preset for the Huntsville AL Marx Meter Array version 2 sensor"
    homepage = "https://hamma.dev/"
    repo = "https://github.com/hamma-dev/mjolnir-hamma"
    preset_version = "0.1.0"
    brokkr_version_min = "0.3.0"

# Data type presets to use for the data types that follow
[type_presets]
    bitfield = { conversion = "bitfield", unit = false, uncertainty = false }
    count_byte = { binary_type = "B", unit = "", uncertainty = false }
    count_packet = { binary_type = "I", unit = "", uncertainty = false }
    count_word = { binary_type = "H", unit = "", uncertainty = false }
    gigabytes = { conversion = "custom", binary_type = "Q", unit = "GB", uncertainty = false, base = 10, power = -9, digits = 9 }
    id_val = { binary_type = "B", unit = "", uncertainty = false }
    padding_byte = { input_type = "1s", conversion = false }
    size_words = { conversion = "custom", scale = 2, unit = "B", uncertainty = false }
    threashold = { binary_type = "H", unit = "", uncertainty = false }

# Data types referenced in individual presets
[data_types]
    marker_val = { input_type = "8s", conversion = false }
    sequence_count = { type_presets = "count_packet" }
    timestamp = { binary_type = "q", conversion = "time_posix", divisor_to_s = 1000, unit = "s", uncertainty = 0.001 }
    crc_errors = { full_name = "CRC Errors", type_presets = "count_packet" }
    valid_packets = { type_presets = "count_packet" }
    bytes_read = { full_name = "Data Read", type_presets = "gigabytes" }
    bytes_written = { full_name = "Data Written", type_presets = "gigabytes" }
    bytes_remaining = { full_name = "Disk Remaining", type_presets = "gigabytes" }
    packets_sent = { type_presets = "count_packet" }
    packets_dropped = {  type_presets = "count_packet" }
    science_packet = { full_name = "AGS Science Data", binary_type = "s", conversion = true }
    board_id = { full_name = "Board ID", type_presets = "id_val" }
    firmware_version = { type_presets = "id_val" }
    payload_size = { binary_type = "I", type_presets = "size_words" }
    channel_count = { type_presets = "count_byte" }
    padding_byte_1 = { type_presets = "padding_byte" }
    temperature = { binary_type = "H", conversion = "custom", base = 2, power = -14, scale = 165, offset = -40, digits = 3, unit = "C", uncertainty = 1 }
    humidity = { binary_type = "H", conversion = "custom", base = 2, power = -14, scale = 100, digits = 3, unit = "%", uncertainty = 1 }
    watchdog_counter = { type_presets = "count_word" }
    fifo_counter = { full_name = "FIFO Overflow Counter", type_presets = "count_byte" }
    padding_byte_2 = { type_presets = "padding_byte" }
    threashold_1 = { type_presets = "threashold" }
    threashold_2 = { type_presets = "threashold" }
    threashold_3 = { type_presets = "threashold" }
    threashold_4 = { type_presets = "threashold" }
    threashold_5 = { type_presets = "threashold" }
    threashold_6 = { type_presets = "threashold" }
    threashold_7 = { type_presets = "threashold" }
    threashold_8 = { type_presets = "threashold" }
    block_type = { type_presets = "id_val" }
    block_size = { binary_type = "B", type_presets = "size_words" }
    trigger_position = { full_name = "Trigger Block Position", type_presets = "count_packet" }
    sub_position = { full_name = "Trigger Sub-Block Position", type_presets = "count_byte" }
    padding_byte_3 = { type_presets = "padding_byte" }
    retrigger_position = { full_name = "Retrigger Enable Block Position", type_presets = "count_packet" }
    trigger_channel = { binary_type = "I", type_presets = "bitfield" }
    gps_lat = { full_name = "GPS Latitude", binary_type = "d", unit = "deg" }
    gps_lon = { full_name = "GPS Longitude", binary_type = "d", unit = "deg" }
    gps_alt = { full_name = "GPS Altitude", binary_type = "d", unit = "m" }
    gps_time_week = { full_name = "GPS Time of Week", binary_type = "f", unit = "s" }
    gps_week = { full_name = "GPS Week", binary_type = "h", unit = "week", uncertainty = false }
    gps_utc_offset = { full_name = "GPS UTC Offset", binary_type = "f", unit = "s" }
    gps_status_code = { full_name = "GPS Byte 0x46 Status Code", type_presets = "id_val" }
    gps_health = { full_name = "GPS Byte 0x46 Health Bits", binary_type = "B", type_presets = "bitfield" }
    gps_satellites = { full_name = "GPS Byte 0x6D Satellite Bits", binary_type = "B", type_presets = "bitfield" }
    padding_byte_4 = { type_presets = "padding_byte" }
    gps_subsecond = { full_name = "GPS Subsecond", binary_type = "I", unit = "ns" }
    gps_ecc = { full_name = "GPS Subsecond ECC", binary_type = "I", unit = "ns" }
    time_tag_position = { full_name = "Time Tag Block Position", type_presets = "count_packet" }
    trigger_mask = { binary_type = "I", type_presets = "bitfield" }
    padding_seq = { input_type = "16s", conversion = false }
    packet_sequence =  { type_presets = "count_word" }

[inputs]
    # Input preset that simply pings the HAMMA sensor
    [inputs.ping]
        _module_path = "brokkr.inputs.ping"
        _class_name = "PingInput"
        name = "Sensor Ping"
        host = "10.10.10.1"
        timeout_s = 1

    # Input preset that reads a H&S UDP packet from the sensor
    [inputs.hs]
        _module_path = "brokkr.inputs.network"
        _class_name = "NetworkInput"
        name = "HAMMA2 Sensor Health & Status Packet"
        host = "10.10.10.2"
        port = 8084
        action = "bind"
        socket_family = "IPV4"
        socket_type = "UDP"
        timeout_s = 2
        data_types = [
            "marker_val",
            "sequence_count",
            "timestamp",
            "crc_errors",
            "valid_packets",
            "bytes_read",
            "bytes_written",
            "bytes_remaining",
            "packets_sent",
            "packets_dropped",
        ]

    # AGS science data packets from sensor
    [inputs.science_data]
        _module_path = "brokkr.inputs.network"
        _class_name = "NetworkInput"
        name = "HAMMA2 Sensor AGS Science Packet"
        binary_decoder = false
        passthrough_none = true
        persist_socket = true
        reinit_on_null_data = true
        host = "10.10.10.1"
        port = 8080
        action = "connect"
        socket_family = "IPV4"
        socket_type = "TCP"
        timeout_s = 2
        network_kwargs.data_length = 22000132
        data_types = [
            "science_packet",
        ]

    # AGS science data packet header decoder
    [inputs.science_header]
        _module_path = "brokkr.pipeline.baseinput"
        _class_name = "DecodeInputStep"
        name = "HAMMA2 Sensor AGS Science Packet Header Decode"
        binary_decoder = true
        truncate_after = 128
        decode_kwargs.byte_order = "<"
        data_types = [
                "marker_val",
                "board_id",
                "firmware_version",
                "payload_size",
                "channel_count",
                "padding_byte_1",
                "temperature",
                "humidity",
                "watchdog_counter",
                "fifo_counter",
                "padding_byte_2",
                "threashold_1",
                "threashold_2",
                "threashold_3",
                "threashold_4",
                "threashold_5",
                "threashold_6",
                "threashold_7",
                "threashold_8",
                "block_type",
                "block_size",
                "trigger_position",
                "sub_position",
                "padding_byte_3",
                "retrigger_position",
                "trigger_channel",
                "gps_lat",
                "gps_lon",
                "gps_alt",
                "gps_time_week",
                "gps_week",
                "gps_utc_offset",
                "gps_status_code",
                "gps_health",
                "gps_satellites",
                "padding_byte_4",
                "gps_subsecond",
                "gps_ecc",
                "time_tag_position",
                "trigger_mask",
                "padding_seq",
                "packet_sequence",
        ]